/* 
 * Заказ на ресурсы облака
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Cloud
    /// </summary>
    [DataContract]
        public partial class Cloud :  IEquatable<Cloud>, IValidatableObject
    {
        /// <summary>
        /// Операционная система сервера
        /// </summary>
        /// <value>Операционная система сервера</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum OSEnum
        {
            /// <summary>
            /// Enum Windows for value: Windows
            /// </summary>
            [EnumMember(Value = "Windows")]
            Windows = 1,
            /// <summary>
            /// Enum Linux for value: Linux
            /// </summary>
            [EnumMember(Value = "Linux")]
            Linux = 2        }
        /// <summary>
        /// Операционная система сервера
        /// </summary>
        /// <value>Операционная система сервера</value>
        [DataMember(Name="OS", EmitDefaultValue=false)]
        public OSEnum OS { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cloud" /> class.
        /// </summary>
        /// <param name="cloudId">cloudId.</param>
        /// <param name="idClient">idClient (required).</param>
        /// <param name="oS">Операционная система сервера (required).</param>
        /// <param name="rAM">rAM (required).</param>
        public Cloud(string cloudId = default(string), string idClient = default(string), OSEnum oS = default(OSEnum), string rAM = default(string))
        {
            // to ensure "idClient" is required (not null)
            if (idClient == null)
            {
                throw new InvalidDataException("idClient is a required property for Cloud and cannot be null");
            }
            else
            {
                this.IdClient = idClient;
            }
            // to ensure "oS" is required (not null)
            if (oS == null)
            {
                throw new InvalidDataException("oS is a required property for Cloud and cannot be null");
            }
            else
            {
                this.OS = oS;
            }
            // to ensure "rAM" is required (not null)
            if (rAM == null)
            {
                throw new InvalidDataException("rAM is a required property for Cloud and cannot be null");
            }
            else
            {
                this.RAM = rAM;
            }
            this.CloudId = cloudId;
        }
        
        /// <summary>
        /// Gets or Sets CloudId
        /// </summary>
        [DataMember(Name="cloud_id", EmitDefaultValue=false)]
        public string CloudId { get; set; }

        /// <summary>
        /// Gets or Sets IdClient
        /// </summary>
        [DataMember(Name="id_client", EmitDefaultValue=false)]
        public string IdClient { get; set; }


        /// <summary>
        /// Gets or Sets RAM
        /// </summary>
        [DataMember(Name="RAM", EmitDefaultValue=false)]
        public string RAM { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cloud {\n");
            sb.Append("  CloudId: ").Append(CloudId).Append("\n");
            sb.Append("  IdClient: ").Append(IdClient).Append("\n");
            sb.Append("  OS: ").Append(OS).Append("\n");
            sb.Append("  RAM: ").Append(RAM).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cloud);
        }

        /// <summary>
        /// Returns true if Cloud instances are equal
        /// </summary>
        /// <param name="input">Instance of Cloud to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cloud input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CloudId == input.CloudId ||
                    (this.CloudId != null &&
                    this.CloudId.Equals(input.CloudId))
                ) && 
                (
                    this.IdClient == input.IdClient ||
                    (this.IdClient != null &&
                    this.IdClient.Equals(input.IdClient))
                ) && 
                (
                    this.OS == input.OS ||
                    (this.OS != null &&
                    this.OS.Equals(input.OS))
                ) && 
                (
                    this.RAM == input.RAM ||
                    (this.RAM != null &&
                    this.RAM.Equals(input.RAM))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CloudId != null)
                    hashCode = hashCode * 59 + this.CloudId.GetHashCode();
                if (this.IdClient != null)
                    hashCode = hashCode * 59 + this.IdClient.GetHashCode();
                if (this.OS != null)
                    hashCode = hashCode * 59 + this.OS.GetHashCode();
                if (this.RAM != null)
                    hashCode = hashCode * 59 + this.RAM.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
