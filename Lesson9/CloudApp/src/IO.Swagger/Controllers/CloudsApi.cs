/*
 * Заказ на ресурсы облака
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CloudsApiController : ControllerBase
    { 
        /// <summary>
        /// Метод отмены заказа на облако по ID
        /// </summary>
        /// <param name="cloudId">Идентификатор заказа облака</param>
        /// <response code="200">Успешный ответ заказом облака по ID</response>
        /// <response code="400">Ошибка ввода данных</response>
        /// <response code="500">Ошибка сервера</response>
        /// <response code="0">Все остальное</response>
        [HttpDelete]
        [Route("/api/v1//clouds/{cloud_id}")]
        [ValidateModelState]
        [SwaggerOperation("CencelCloudById")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Ошибка ввода данных")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Ошибка сервера")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Все остальное")]
        public virtual IActionResult CencelCloudById([FromRoute][Required]string cloudId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Метод создания заказа на облако
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Успешный ответ создания заказ на облако</response>
        /// <response code="400">Ошибка ввода данных</response>
        /// <response code="500">Ошибка сервера</response>
        /// <response code="0">Все остальное</response>
        [HttpPost]
        [Route("/api/v1//clouds")]
        [ValidateModelState]
        [SwaggerOperation("CreateCloud")]
        [SwaggerResponse(statusCode: 200, type: typeof(Cloud), description: "Успешный ответ создания заказ на облако")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Ошибка ввода данных")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Ошибка сервера")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Все остальное")]
        public virtual IActionResult CreateCloud([FromBody]Error body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Cloud));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"OS\" : \"Windows\",\n  \"id_client\" : \"f102b615\",\n  \"cloud_id\" : \"f102b615\",\n  \"RAM\" : \"128\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Cloud>(exampleJson)
                        : default(Cloud);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Метод получения списка заказов на облако
        /// </summary>
        /// <response code="200">Успешный ответ со списком заказов в облаке</response>
        /// <response code="400">Ошибка ввода данных</response>
        /// <response code="500">Ошибка сервера</response>
        /// <response code="0">Все остальное</response>
        [HttpGet]
        [Route("/api/v1//clouds")]
        [ValidateModelState]
        [SwaggerOperation("GetAllClouds")]
        [SwaggerResponse(statusCode: 200, type: typeof(Clouds), description: "Успешный ответ со списком заказов в облаке")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Ошибка ввода данных")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Ошибка сервера")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Все остальное")]
        public virtual IActionResult GetAllClouds()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Clouds));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"OS\" : \"Windows\",\n  \"id_client\" : \"f102b615\",\n  \"cloud_id\" : \"f102b615\",\n  \"RAM\" : \"128\"\n}, {\n  \"OS\" : \"Windows\",\n  \"id_client\" : \"f102b615\",\n  \"cloud_id\" : \"f102b615\",\n  \"RAM\" : \"128\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Clouds>(exampleJson)
                        : default(Clouds);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Метод получения заказа на облако по ID
        /// </summary>
        /// <param name="cloudId">Идентификатор заказа облака</param>
        /// <response code="200">Успешный ответ заказом облака по ID</response>
        /// <response code="400">Ошибка ввода данных</response>
        /// <response code="500">Ошибка сервера</response>
        /// <response code="0">Все остальное</response>
        [HttpGet]
        [Route("/api/v1//clouds/{cloud_id}")]
        [ValidateModelState]
        [SwaggerOperation("GetCloudById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Cloud), description: "Успешный ответ заказом облака по ID")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Ошибка ввода данных")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Ошибка сервера")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Все остальное")]
        public virtual IActionResult GetCloudById([FromRoute][Required]string cloudId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Cloud));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"OS\" : \"Windows\",\n  \"id_client\" : \"f102b615\",\n  \"cloud_id\" : \"f102b615\",\n  \"RAM\" : \"128\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Cloud>(exampleJson)
                        : default(Cloud);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
